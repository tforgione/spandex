initSidebarItems({"fn":[["error","Creates an error."],["get_block","Gets a block of content. `# use spandex::parser::ast::Ast; # use spandex::parser::Span; # use spandex::parser::combinators::get_block; let input = Span::new(\"First paragraph\\n\\nSecond paragraph\"); let (input, block) = get_block(input).unwrap(); assert_eq!(block.fragment, \"First paragraph\"); let (input, block) = get_block(input).unwrap(); assert_eq!(block.fragment, \"Second paragraph\");`"],["parse","Parses a whole dex file from a name."],["parse_any","Parses some multiline inline content."],["parse_block_content","Parses a block of content. `# use spandex::parser::ast::Ast; # use spandex::parser::Span; # use spandex::parser::combinators::parse_block_content; let input = Span::new(\"First paragraph\"); let (_, block) = parse_block_content(input).unwrap(); assert_eq!(block, Ast::Paragraph(vec![Ast::Text(String::from(\"First paragraph\"))]));`"],["parse_bold","Parses some bold content. `# use spandex::parser::ast::Ast; # use spandex::parser::Span; # use spandex::parser::combinators::parse_bold; let input = Span::new(\"*Hello*\"); let parse = parse_bold(input).unwrap().1; assert_eq!(parse, Ast::Bold(vec![Ast::Text(String::from(\"Hello\"))]));`"],["parse_comment","Parses a comment. `# use spandex::parser::ast::Ast; # use spandex::parser::Span; # use spandex::parser::combinators::parse_comment; let input = Span::new(\"|| comment\"); let parse = parse_comment(input).unwrap().1; assert_eq!(parse, Ast::Newline);`"],["parse_content","Parses a whole dex file."],["parse_delimited","Parses a delimited element."],["parse_group","Parses some text content. `# use spandex::parser::ast::Ast; # use spandex::parser::Span; # use spandex::parser::combinators::parse_group; let input = Span::new(\"*Hello* to /you/\"); let parsed = parse_group(input).unwrap().1; assert_eq!(parsed, vec![     Ast::Bold(vec![Ast::Text(String::from(\"Hello\"))]),     Ast::Text(String::from(\" to \")),     Ast::Italic(vec![Ast::Text(String::from(\"you\"))]), ]);`"],["parse_inline_math","Parses some math inline math. `# use spandex::parser::ast::Ast; # use spandex::parser::Span; # use spandex::parser::combinators::parse_inline_math; let input = Span::new(\"$x = 9$\"); let parse = parse_inline_math(input).unwrap().1; assert_eq!(parse, Ast::InlineMath(String::from(\"x = 9\")));`"],["parse_italic","Parses some italic content. `# use spandex::parser::ast::Ast; # use spandex::parser::Span; # use spandex::parser::combinators::parse_italic; let input = Span::new(\"/Hello/\"); let parse = parse_italic(input).unwrap().1; assert_eq!(parse, Ast::Italic(vec![Ast::Text(String::from(\"Hello\"))]));`"],["parse_paragraph","Parses a paragraph of text content. `# use spandex::parser::ast::Ast; # use spandex::parser::Span; # use spandex::parser::combinators::parse_paragraph; let input = Span::new(\"*Hello* to /you/\"); let parsed = parse_paragraph(input).unwrap().1; assert_eq!(parsed, Ast::Paragraph(vec![     Ast::Bold(vec![Ast::Text(String::from(\"Hello\"))]),     Ast::Text(String::from(\" to \")),     Ast::Italic(vec![Ast::Text(String::from(\"you\"))]), ]));`"],["parse_single_line","Parses a title on a single line. `# use spandex::parser::ast::Ast; # use spandex::parser::Span; # use spandex::parser::combinators::parse_single_line; let input = Span::new(\"This is my title\"); let parsed = parse_single_line(input).unwrap().1; assert_eq!(parsed, vec![Ast::Text(String::from(\"This is my title\"))]);`"],["parse_title","Parses a whole title. `# use spandex::parser::ast::Ast; # use spandex::parser::Span; # use spandex::parser::combinators::parse_title; let input = Span::new(\"# This is my title\"); let title = parse_title(input).unwrap().1; assert_eq!(title, Ast::Title { level: 0, children: vec![     Ast::Text(String::from(\"This is my title\"))] });`"],["parse_title_level","Parses the hashes from the level of a title. `# use spandex::parser::ast::Ast; # use spandex::parser::Span; # use spandex::parser::combinators::parse_title_level; let input = Span::new(\"# This is my title\"); let level = parse_title_level(input).unwrap().1; assert_eq!(level, 0); let input = Span::new(\"### This is my subtitle\"); let level = parse_title_level(input).unwrap().1; assert_eq!(level, 2);`"],["should_stop","Returns true if the character passed as parameter changes the type of parsing we're going to do."],["warning","Creates a warning."]]});